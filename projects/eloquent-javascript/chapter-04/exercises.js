////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
let i;
let result = [];
if(start === end) return result;
if(step < 0) return result;

if(step > 0){
  for(i = start; i <= end; i += step){
    result.push(i);
  }
  } else {
    for (i = start; i <= end; i++){
      result.push(i);
    }
  }
  
  return result;
}
  



////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  return array.reduce(function(sum, vals){
    return sum + vals;
  }, 0);
  

}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
const result = [];
let i;

for(i = array.length -1; i >=0; i--){
  result.push(array[i]);
  
}

return result;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
 return array.reverse();
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let list = null;
  let i;
  for(i = array.length -1; i >=0; i--){
    list = {value: array[i], rest: list};
   }
   return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
  let array = [];
  let int;
  for(int = list; int; int = int.rest){
    array.push(int.value);
    }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(val, list) {
let vals = {
  value: val,
  rest: list
  
};

return vals;


}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, n) {
if(!list) return undefined;
else if(n == 0) return list.value;
else return nth(list.rest, n - 1);

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(collection1, collection2) {

// comparing two empty objects
  // we need to make a shallow copy of both collecttions
  // compare each collection by their value
 if (collection1 === collection2) return true;
  
  if (collection1 == null || typeof collection1 != "object" ||
      collection2 == null || typeof collection2 != "object") return false;

  let keysA = Object.keys(collection1), keysB = Object.keys(collection2);

  if (keysA.length != keysB.length) return false;

  for (let key of keysA) {
    if (!keysB.includes(key) || !deepEqual(collection1[key], collection2[key])) return false;
  }

  return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
